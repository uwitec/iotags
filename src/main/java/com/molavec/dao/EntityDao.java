 package com.molavec.dao;

import java.util.List;

import com.molavec.iotags.dao.exception.QueryException;



/**
 * Interface that follow DAO (Data Access Object) pattern
 * to obtain objects.
 * 
 * How to use?? Example:
 * <pre> 
 * public class AnalogDataQuery extends EntityDaoCriteria<AnalogData, Integer> {
 *	
 *	public AnalogDataQuery(){
 *		super(AnalogData.class);
 *	}
 *	
 * 	static Logger log = LoggerFactory.getLogger(AnalogDataQuery.class);
 *}
 * </pre>
 * 
 * @author molavec
 *
 * @param <T> Class to be used
 * @param <PK> Class type of primary key 
 */

public interface EntityDao<T, PK>{
	
	/**
	 * Add entity to persistence context.
	 * 
	 * @param e Entity
	 * @throws QueryException if persist fail.
	 */
	void save(T e) 		throws QueryException;
	
	/**
	 * TODO: cambiar el nombre del modo de generaci√≥n del primary key al nombre formal.
	 * 
	 * Add entity to persistence context. Use it if primary key is generated by database.
	 * 
	 * @param e Entity
	 * @throws QueryException if persist fail.
	 */
	T attach(T e) 		throws QueryException;
	
	/**
	 * Obtain entity from database by primary key
	 *  
	 * @param id primary key id
	 * @return Entity
	 * @throws QueryException if persist fail.
	 */
	T get(PK id) throws QueryException;
	
	/**
	 * Obtain entity from database by using PrepareQueryAdapter subclass.
	 * 
	 * @param prepareQuery
	 * @return
	 * @throws QueryException
	 */
	T get(PrepareQuery<T> prepareQuery) throws QueryException;

	/**
	 * delete entity
	 * 
	 * @param e Entity to delete.
	 * @throws QueryException if delete fail.
	 */
	void delete(PK e) throws QueryException;
	
	/**
	 * Delete all elements in table.
	 * @throws QueryException
	 */
	void deleteAll() 	throws QueryException;
	
	/**
	 * Get all elements in a Table
	 * @return
	 * @throws QueryException
	 */
	List<T> find() throws QueryException;
	
	/**
	 * Obtain elements from database filtered by PrepareQueryAdapter subclass.
	 * 
	 * @param prepareQuery
	 * @return
	 * @throws QueryException
	 */
	List<T> find(PrepareQuery<T> prepareQuery) throws QueryException ;
	
	/**
	 * Obtain entities using pagination
	 * 
	 * @param page Page number 
	 * @param pageSize Page Size
	 * @return List with entities
	 * @throws QueryException if fail
	 */
	List<T> find(int page, int pageSize)  throws QueryException;
	
	/**
	 * Obtain entities using pagination filtered by prepareQueryAdapter subclass
	 * 
	 * @param page Page number 
	 * @param pageSize Page Size
	 * @param prepareQuery filter conditions
	 * @return List with entities filtered
	 * @throws QueryException it fail
	 */
	List<T> find(int page, int pageSize, PrepareQuery<T> prepareQuery) throws QueryException;
	
	/**
	 * count entities
	 * @return number of entities
	 * @throws QueryException
	 */
	long count() throws QueryException;
	
	/**
	 * count entities filtered by prepareQueryAdapter subclass
	 * 
	 * @return number of entities 
	 * @param prepareQuery filter conditions
	 * @throws QueryException if it fail.
	 */
	long count(PrepareQuery<T> prepareQuery) throws QueryException;

//	T update(T e) 		throws QueryException;
//	void delete(T e) 	throws QueryException;
	
}
